// Code generated by mockery v2.45.0. DO NOT EDIT.

package servicemocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/Xurliman/metrics-alert-system/cmd/server/app/models"
)

// MetricsRepositoryInterface is an autogenerated mock type for the MetricsRepositoryInterface type
type MetricsRepositoryInterface struct {
	mock.Mock
}

// FindByName provides a mock function with given fields: metricName
func (_m *MetricsRepositoryInterface) FindByName(metricName string) (*models.Metrics, error) {
	ret := _m.Called(metricName)

	if len(ret) == 0 {
		panic("no return value specified for FindByName")
	}

	var r0 *models.Metrics
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Metrics, error)); ok {
		return rf(metricName)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Metrics); ok {
		r0 = rf(metricName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Metrics)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(metricName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertMany provides a mock function with given fields: ctx, metrics
func (_m *MetricsRepositoryInterface) InsertMany(ctx context.Context, metrics []*models.Metrics) error {
	ret := _m.Called(ctx, metrics)

	if len(ret) == 0 {
		panic("no return value specified for InsertMany")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*models.Metrics) error); ok {
		r0 = rf(ctx, metrics)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields:
func (_m *MetricsRepositoryInterface) List() map[string]*models.Metrics {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 map[string]*models.Metrics
	if rf, ok := ret.Get(0).(func() map[string]*models.Metrics); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*models.Metrics)
		}
	}

	return r0
}

// Ping provides a mock function with given fields: ctx
func (_m *MetricsRepositoryInterface) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: metric
func (_m *MetricsRepositoryInterface) Save(metric *models.Metrics) *models.Metrics {
	ret := _m.Called(metric)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *models.Metrics
	if rf, ok := ret.Get(0).(func(*models.Metrics) *models.Metrics); ok {
		r0 = rf(metric)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Metrics)
		}
	}

	return r0
}

// NewMetricsRepositoryInterface creates a new instance of MetricsRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetricsRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetricsRepositoryInterface {
	mock := &MetricsRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
