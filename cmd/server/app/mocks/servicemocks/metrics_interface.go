// Code generated by mockery v2.45.0. DO NOT EDIT.

package servicemocks

import (
	requests "github.com/Xurliman/metrics-alert-system/cmd/server/app/http/requests"
	models "github.com/Xurliman/metrics-alert-system/cmd/server/app/models"
	mock "github.com/stretchr/testify/mock"
)

// MetricsInterface is an autogenerated mock type for the MetricsInterface type
type MetricsInterface struct {
	mock.Mock
}

// FindByName provides a mock function with given fields: metricName
func (_m *MetricsInterface) FindByName(metricName string) (*models.Metrics, error) {
	ret := _m.Called(metricName)

	if len(ret) == 0 {
		panic("no return value specified for FindByName")
	}

	var r0 *models.Metrics
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Metrics, error)); ok {
		return rf(metricName)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Metrics); ok {
		r0 = rf(metricName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Metrics)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(metricName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetricValue provides a mock function with given fields: metricsName
func (_m *MetricsInterface) GetMetricValue(metricsName string) (string, error) {
	ret := _m.Called(metricsName)

	if len(ret) == 0 {
		panic("no return value specified for GetMetricValue")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(metricsName)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(metricsName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(metricsName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: metricName, metricValue, existingMetric
func (_m *MetricsInterface) Save(metricName string, metricValue string, existingMetric *models.Metrics) error {
	ret := _m.Called(metricName, metricValue, existingMetric)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *models.Metrics) error); ok {
		r0 = rf(metricName, metricValue, existingMetric)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveBody provides a mock function with given fields: metricRequest, existingMetric
func (_m *MetricsInterface) SaveBody(metricRequest requests.MetricsSaveRequest, existingMetric *models.Metrics) (*models.Metrics, error) {
	ret := _m.Called(metricRequest, existingMetric)

	if len(ret) == 0 {
		panic("no return value specified for SaveBody")
	}

	var r0 *models.Metrics
	var r1 error
	if rf, ok := ret.Get(0).(func(requests.MetricsSaveRequest, *models.Metrics) (*models.Metrics, error)); ok {
		return rf(metricRequest, existingMetric)
	}
	if rf, ok := ret.Get(0).(func(requests.MetricsSaveRequest, *models.Metrics) *models.Metrics); ok {
		r0 = rf(metricRequest, existingMetric)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Metrics)
		}
	}

	if rf, ok := ret.Get(1).(func(requests.MetricsSaveRequest, *models.Metrics) error); ok {
		r1 = rf(metricRequest, existingMetric)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMetricsInterface creates a new instance of MetricsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetricsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetricsInterface {
	mock := &MetricsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
