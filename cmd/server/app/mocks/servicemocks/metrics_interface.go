// Code generated by mockery v2.45.0. DO NOT EDIT.

package servicemocks

import mock "github.com/stretchr/testify/mock"

// MetricsServiceInterface is an autogenerated mock type for the MetricsServiceInterface type
type MetricsServiceInterface struct {
	mock.Mock
}

// FindByName provides a mock function with given fields: metricsType, metricsName
func (_m *MetricsServiceInterface) FindByName(metricsType string, metricsName string) (string, error) {
	ret := _m.Called(metricsType, metricsName)

	if len(ret) == 0 {
		panic("no return value specified for FindByName")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(metricsType, metricsName)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(metricsType, metricsName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(metricsType, metricsName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *MetricsServiceInterface) GetAll() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// NewMetricsServiceInterface creates a new instance of MetricsServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetricsServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetricsServiceInterface {
	mock := &MetricsServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
