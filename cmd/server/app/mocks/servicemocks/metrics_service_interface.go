// Code generated by mockery v2.45.0. DO NOT EDIT.

package servicemocks

import (
	interfaces "github.com/Xurliman/metrics-alert-system/cmd/server/app/interfaces"
	mock "github.com/stretchr/testify/mock"

	models "github.com/Xurliman/metrics-alert-system/cmd/server/app/models"

	requests "github.com/Xurliman/metrics-alert-system/cmd/server/app/http/requests"
)

// MetricsServiceInterface is an autogenerated mock type for the MetricsServiceInterface type
type MetricsServiceInterface struct {
	mock.Mock
}

// GetMetricValue provides a mock function with given fields: metric, metricName
func (_m *MetricsServiceInterface) GetMetricValue(metric interfaces.MetricsInterface, metricName string) (string, error) {
	ret := _m.Called(metric, metricName)

	if len(ret) == 0 {
		panic("no return value specified for GetMetricValue")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(interfaces.MetricsInterface, string) (string, error)); ok {
		return rf(metric, metricName)
	}
	if rf, ok := ret.Get(0).(func(interfaces.MetricsInterface, string) string); ok {
		r0 = rf(metric, metricName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(interfaces.MetricsInterface, string) error); ok {
		r1 = rf(metric, metricName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *MetricsServiceInterface) List() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// SaveWhenBody provides a mock function with given fields: metric, metricRequest
func (_m *MetricsServiceInterface) SaveWhenBody(metric interfaces.MetricsInterface, metricRequest requests.MetricsSaveRequest) (*models.Metrics, error) {
	ret := _m.Called(metric, metricRequest)

	if len(ret) == 0 {
		panic("no return value specified for SaveWhenBody")
	}

	var r0 *models.Metrics
	var r1 error
	if rf, ok := ret.Get(0).(func(interfaces.MetricsInterface, requests.MetricsSaveRequest) (*models.Metrics, error)); ok {
		return rf(metric, metricRequest)
	}
	if rf, ok := ret.Get(0).(func(interfaces.MetricsInterface, requests.MetricsSaveRequest) *models.Metrics); ok {
		r0 = rf(metric, metricRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Metrics)
		}
	}

	if rf, ok := ret.Get(1).(func(interfaces.MetricsInterface, requests.MetricsSaveRequest) error); ok {
		r1 = rf(metric, metricRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveWhenParams provides a mock function with given fields: metric, metricName, metricValue
func (_m *MetricsServiceInterface) SaveWhenParams(metric interfaces.MetricsInterface, metricName string, metricValue string) error {
	ret := _m.Called(metric, metricName, metricValue)

	if len(ret) == 0 {
		panic("no return value specified for SaveWhenParams")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interfaces.MetricsInterface, string, string) error); ok {
		r0 = rf(metric, metricName, metricValue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Show provides a mock function with given fields: metric, metricName
func (_m *MetricsServiceInterface) Show(metric interfaces.MetricsInterface, metricName string) (*models.Metrics, error) {
	ret := _m.Called(metric, metricName)

	if len(ret) == 0 {
		panic("no return value specified for Show")
	}

	var r0 *models.Metrics
	var r1 error
	if rf, ok := ret.Get(0).(func(interfaces.MetricsInterface, string) (*models.Metrics, error)); ok {
		return rf(metric, metricName)
	}
	if rf, ok := ret.Get(0).(func(interfaces.MetricsInterface, string) *models.Metrics); ok {
		r0 = rf(metric, metricName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Metrics)
		}
	}

	if rf, ok := ret.Get(1).(func(interfaces.MetricsInterface, string) error); ok {
		r1 = rf(metric, metricName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMetricsServiceInterface creates a new instance of MetricsServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetricsServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetricsServiceInterface {
	mock := &MetricsServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
