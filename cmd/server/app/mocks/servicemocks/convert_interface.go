// Code generated by mockery v2.45.0. DO NOT EDIT.

package servicemocks

import (
	requests "github.com/Xurliman/metrics-alert-system/cmd/server/app/http/requests"
	models "github.com/Xurliman/metrics-alert-system/cmd/server/app/models"
	mock "github.com/stretchr/testify/mock"
)

// Converter is an autogenerated mock type for the Converter type
type Converter struct {
	mock.Mock
}

// ParamsToMetric provides a mock function with given fields: existingMetric, metricName, metricValue
func (_m *Converter) ParamsToMetric(existingMetric *models.Metrics, metricName string, metricValue string) (*models.Metrics, error) {
	ret := _m.Called(existingMetric, metricName, metricValue)

	if len(ret) == 0 {
		panic("no return value specified for ParamsToMetric")
	}

	var r0 *models.Metrics
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Metrics, string, string) (*models.Metrics, error)); ok {
		return rf(existingMetric, metricName, metricValue)
	}
	if rf, ok := ret.Get(0).(func(*models.Metrics, string, string) *models.Metrics); ok {
		r0 = rf(existingMetric, metricName, metricValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Metrics)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Metrics, string, string) error); ok {
		r1 = rf(existingMetric, metricName, metricValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestToMetric provides a mock function with given fields: existingMetric, metricRequest
func (_m *Converter) RequestToMetric(existingMetric *models.Metrics, metricRequest requests.MetricsSaveRequest) (*models.Metrics, error) {
	ret := _m.Called(existingMetric, metricRequest)

	if len(ret) == 0 {
		panic("no return value specified for RequestToMetric")
	}

	var r0 *models.Metrics
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Metrics, requests.MetricsSaveRequest) (*models.Metrics, error)); ok {
		return rf(existingMetric, metricRequest)
	}
	if rf, ok := ret.Get(0).(func(*models.Metrics, requests.MetricsSaveRequest) *models.Metrics); ok {
		r0 = rf(existingMetric, metricRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Metrics)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Metrics, requests.MetricsSaveRequest) error); ok {
		r1 = rf(existingMetric, metricRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewConverter creates a new instance of Converter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Converter {
	mock := &Converter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
