// Code generated by mockery v2.45.0. DO NOT EDIT.

package servicemocks

import (
	interfaces "github.com/Xurliman/metrics-alert-system/cmd/server/app/interfaces"
	mock "github.com/stretchr/testify/mock"

	models "github.com/Xurliman/metrics-alert-system/cmd/server/app/models"

	requests "github.com/Xurliman/metrics-alert-system/cmd/server/app/http/requests"
)

// Switcher is an autogenerated mock type for the Switcher type
type Switcher struct {
	mock.Mock
}

// ConvertParams provides a mock function with given fields: converter, existingMetric, metricName, metricValue
func (_m *Switcher) ConvertParams(converter interfaces.Converter, existingMetric *models.Metrics, metricName string, metricValue string) (*models.Metrics, error) {
	ret := _m.Called(converter, existingMetric, metricName, metricValue)

	if len(ret) == 0 {
		panic("no return value specified for ConvertParams")
	}

	var r0 *models.Metrics
	var r1 error
	if rf, ok := ret.Get(0).(func(interfaces.Converter, *models.Metrics, string, string) (*models.Metrics, error)); ok {
		return rf(converter, existingMetric, metricName, metricValue)
	}
	if rf, ok := ret.Get(0).(func(interfaces.Converter, *models.Metrics, string, string) *models.Metrics); ok {
		r0 = rf(converter, existingMetric, metricName, metricValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Metrics)
		}
	}

	if rf, ok := ret.Get(1).(func(interfaces.Converter, *models.Metrics, string, string) error); ok {
		r1 = rf(converter, existingMetric, metricName, metricValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConvertRequest provides a mock function with given fields: converter, existingMetric, metricRequest
func (_m *Switcher) ConvertRequest(converter interfaces.Converter, existingMetric *models.Metrics, metricRequest requests.MetricsSaveRequest) (*models.Metrics, error) {
	ret := _m.Called(converter, existingMetric, metricRequest)

	if len(ret) == 0 {
		panic("no return value specified for ConvertRequest")
	}

	var r0 *models.Metrics
	var r1 error
	if rf, ok := ret.Get(0).(func(interfaces.Converter, *models.Metrics, requests.MetricsSaveRequest) (*models.Metrics, error)); ok {
		return rf(converter, existingMetric, metricRequest)
	}
	if rf, ok := ret.Get(0).(func(interfaces.Converter, *models.Metrics, requests.MetricsSaveRequest) *models.Metrics); ok {
		r0 = rf(converter, existingMetric, metricRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Metrics)
		}
	}

	if rf, ok := ret.Get(1).(func(interfaces.Converter, *models.Metrics, requests.MetricsSaveRequest) error); ok {
		r1 = rf(converter, existingMetric, metricRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSwitcher creates a new instance of Switcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSwitcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *Switcher {
	mock := &Switcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
